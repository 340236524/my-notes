<div class="bix">
    <div class="item"></div>
</div> 

.box{
    display:flex
    .item{

    }
}


1.容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。
主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。

2. class .box  容器的属性 以下6个属性设置在容器上。 
    flex-direction
    flex-wrap
    flex-flow
    justify-content
    align-items
    align-content

2(1) flex-direction 属性
.box {
    flex-direction: row | row-reverse | column | column-reverse;
}
row（默认值）：主轴为水平方向，起点在左端。
row-reverse：主轴为水平方向，起点在右端。
column：主轴为垂直方向，起点在上沿。
column-reverse：主轴为垂直方向，起点在下沿。

2(2) flex-wrap 属性
.box{
  flex-wrap: nowrap | wrap | wrap-reverse;
}
nowrap（默认）：不换行。   
wrap：换行，第一行在上方。
wrap-reverse：换行，第一行在下方。

2(3) flex-flow 属性
flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。
.box {
  flex-flow: <flex-direction> || <flex-wrap>;
}
例如  flex-flow: column wrap;

2(4) justify-content 属性
.box {
  justify-content: flex-start | flex-end | center | space-between | space-around;
}
flex-start（默认值）：左对齐
flex-end：右对齐
center： 居中
space-between：两端对齐，项目之间的间隔都相等。
space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。

2(5) align-items 属性
.box {
  align-items: flex-start | flex-end | center | baseline | stretch;
}
flex-start：交叉轴的起点对齐。              顶部对齐 
flex-end：交叉轴的终点对齐。                底部对齐
center：交叉轴的中点对齐。                  上下中间对齐 
baseline：项目的第一行文字的基线对齐。
stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。

2(6) align-content 属性
align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。  配合flex-wrap:wrap 多行使用
.box {
  align-content: flex-start | flex-end | center | space-between | space-around | stretch;
}
flex-start：与交叉轴的起点对齐。                    顶部对齐
flex-end：与交叉轴的终点对齐。                      底部对齐
center：与交叉轴的中点对齐。                        上下中间对齐
space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。       上下两端对齐
space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。
stretch（默认值）：轴线占满整个交叉轴。


3. class .item  项目的属性 以下6个属性设置在项目上。
    order
    flex-grow
    flex-shrink
    flex-basis
    flex
    align-self

3(1)order 属性
.item {
  order: <integer>;
}
order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。

3(2)flex-grow 属性
.item {
  flex-grow: <number>; /* default 0 */
}
flex-grow:0     flex-grow:1     flex-grow:2
flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。
如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。

3(3)flex-shrink 属性
.item {
  flex-shrink: <number>; /* default 1 */
}
flex-shrink:1   flex-shrink:0
flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。
如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。

3(4) flex-basis 属性
.item {
  flex-basis: <length> | auto; /* default auto */
}
flex-basis: 100px;  flex-basis: auto;
flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。

3(5) flex属性
.item {
  flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]
}
flex:auto;  (1 1 auto)    flex:none;  (0 0 auto)
flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。

3(6) align-self属性
.item {
  align-self: auto | flex-start | flex-end | center | baseline | stretch;
}
align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。
默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。
