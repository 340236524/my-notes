父组件
<template>
    <div class="father">
        <child :message="message" v-on:messageChange="useMessage($even)"></child>   
    </div>                          //接收子组件传过来的数据 v-on:messageChange
</template>                         //并创建点击事件 useMessage($even)  $event（固定名字，不能改）参数

<script>
    import child form "@/路径"
    export default{
        name:"father",
        components:{
            child
        },
        data(){
            return{
                message:"数据"
            }
        },
        methods:{
            useMessage(msg){
                this.message = msg;
            }
        }
    }
</script>
注释：
<child :message="message"></child>  绑定数据message传给子组件  完整格式 v-bind::message="message" 

子组件
<template>
    <div class="child">
        <p>{{ message }}</p>                       
        <button @click="changeMessage"></button> 
    </div> 
</template>

<script>
    export default{
        name:"child",
        props:["message"],             // 接收负组件传过来的数据 message props:["message"]
        data(){
            return{
                childData:""
            }
        },
        methods:{
            changeMessage(){
                this.$emit("messageChange","将数据传给父组件")    //自定义事件 将数据传给父组件
            }
        }
    }
</script>
注释：
子组件接收完数据 message 可以直接使用     <p>{{ message }}</p>
子组件可以使用 message 也可以给数据赋值

使用this.$emit("messageChange","将数据传给父组件")    //自定义事件 将数据传给父组件

父组件 <child :message="message" v-on:messageChange="useMessage($even)"></child>
使用 v-on:messageChange="useMessage($even)" 接收子组件传过来的数据 并创建 useMessage($even) 点击事件
    $event（固定名字，不能改）参数

    methods:{
        useMessage(msg){
            this.message = msg;
        }
    }